import streamlit as st
from PIL import Image
import os
import time

# Page config
st.set_page_config(
    page_title="Historical Image Analysis Chatbot",
    page_icon="🏛️",
    layout="wide"
)

def load_files():
    """Load metadata, GPT output, and SEA-LION prompt template"""
    try:
        # Read metadata
        with open('metadata.txt', 'r') as f:
            metadata = f.read().strip()
        
        # Read GPT-4o output
        with open('gpt-4o_output.md', 'r') as f:
            gpt_output = f.read().strip()
        
        # Read SEA-LION prompt template
        with open('sealion_prompt.md', 'r') as f:
            prompt_template = f.read().strip()
        
        return metadata, gpt_output, prompt_template
    except FileNotFoundError as e:
        st.error(f"File not found: {str(e)}")
        return None, None, None

def create_sealion_prompt(metadata, gpt_output, prompt_template):
    """Insert metadata and GPT output into the SEA-LION prompt template"""
    
    # Extract location and date from metadata
    lines = metadata.split('\n')
    location = ""
    date = ""
    
    for line in lines:
        if line.startswith("Location:"):
            location = line.replace("Location:", "").strip()
        elif line.startswith("Date:"):
            date = line.replace("Date:", "").strip()
    
    # Replace placeholders in the prompt template
    filled_prompt = prompt_template.replace(
        "[Enter the known location of the photo here, e.g., South Bridge Road]", 
        location
    )
    filled_prompt = filled_prompt.replace(
        "[Enter the known or estimated date of the photo here, e.g., circa 1910]", 
        date
    )
    filled_prompt = filled_prompt.replace(
        "[Paste the AI-generated description of the photograph here]", 
        gpt_output
    )

    print(filled_prompt)
    
    return filled_prompt

def simulate_sealion_response():
    """Simulate SEA-LION response for demonstration purposes"""
    # This is a placeholder response that would be generated by the actual model
    return """
**Step 1: Critical Evaluation and Scholarly Correction**

The provided annotation demonstrates several analytical strengths but requires substantial corrections regarding architectural specificity and historical contextualization for the Ellenborough Market area circa 1970.

**Architectural Heritage Corrections:**
- The described "shophouses" are more accurately classified as post-war commercial buildings rather than traditional pre-war shophouses. By 1970, Ellenborough Market area featured predominantly **two-storey commercial blocks** built in the 1950s-60s utilitarian style, lacking the ornate facades and five-foot ways characteristic of colonial-era shophouses.
- The "modernist high-rise apartment building" identified is likely part of the **early HDB pilot projects**, specifically the **St. Michael's Estate** or similar experimental housing schemes that preceded the mass HDB programme.

**Urban Development Context:**
- The bridge visible is most likely **Coleman Bridge**, constructed in 1840 and reconstructed in 1929. The vehicular traffic reflects Singapore's rapid motorization in the late 1960s, coinciding with the government's push for urban renewal.
- The canal system shown represents the **Rochor Canal** network, which by 1970 was already designated for future reclamation and urban redevelopment.

**Step 2: Deepen with "Invisible" Historical Context**

**Economic Transformation:**
The Ellenborough Market area in 1970 was experiencing the final phase of its role as a traditional **wet market and river trading hub**. The boats visible likely represent the last generation of traditional bumboat operators before the government's systematic relocation of river trade to modern port facilities.

**Social Stratification:**
The mixed architectural landscape reflects Singapore's **dual economy** of the period - traditional market vendors and small traders occupying older structures, while emerging middle-class families were being housed in the new HDB blocks visible in the background.

**Legislative Framework:**
This scene captures the moment when the **Urban Renewal Department's** plans for the area were being implemented, leading to the eventual demolition of traditional market structures and their replacement with modern commercial complexes.

**Step 3: Definitive Scholarly Annotation**

This 1970 photograph of Ellenborough Market area documents a pivotal moment in Singapore's urban transformation, capturing the intersection of traditional Southeast Asian commercial life with state-led modernization. The image reveals the systematic replacement of organic market structures with rationalized urban planning, representing broader tensions between heritage preservation and development imperatives that would define Singapore's urban landscape for decades to come.

The architectural juxtaposition visible - traditional two-storey commercial blocks giving way to experimental public housing towers - illustrates the government's comprehensive approach to social engineering through built environment modification, marking this location as a key site in understanding Singapore's transition from colonial port city to modern nation-state.
"""

def highlight_differences(gpt_text, sealion_text):
    """Identify and highlight key differences between GPT and SEA-LION responses"""
    differences = []
    
    # Key thematic differences
    differences.append("**🎯 Focus Differences:**")
    differences.append("- **GPT-4o**: Emphasizes general architectural styles and visual description")
    differences.append("- **SEA-LION**: Provides specific Singapore context and local historical references")
    
    differences.append("\n**🏛️ Architectural Analysis:**")
    differences.append("- **GPT-4o**: Generic shophouse and modernist building descriptions")
    differences.append("- **SEA-LION**: Specific identification of post-war commercial blocks and early HDB pilot projects")
    
    differences.append("\n**📍 Local Context:**")
    differences.append("- **GPT-4o**: General colonial port city characteristics")
    differences.append("- **SEA-LION**: Specific references to Coleman Bridge, Rochor Canal, St. Michael's Estate")
    
    differences.append("\n**⏰ Historical Specificity:**")
    differences.append("- **GPT-4o**: Broad temporal ranges (1950s-1970s)")
    differences.append("- **SEA-LION**: Precise 1970 context with specific policy references (Urban Renewal Department)")
    
    return differences

def main():
    st.title("🏛️ Historical Image Analysis Chatbot")
    st.markdown("*Comparing GPT-4o and SEA-LION responses for historical Singaporean imagery*")
    
    # Load files
    metadata, gpt_output, prompt_template = load_files()
    
    if metadata is None:
        st.error("Could not load required files. Please ensure metadata.txt, gpt-4o_output.md, and sealion_prompt.md exist.")
        return
    
    # Sidebar with file contents
    with st.sidebar:
        st.header("📄 Source Files")
        
        with st.expander("Metadata"):
            st.text(metadata)
        
        with st.expander("GPT-4o Output (Preview)"):
            st.markdown(gpt_output[:500] + "..." if len(gpt_output) > 500 else gpt_output)
        
        with st.expander("SEA-LION Prompt Template"):
            st.markdown(prompt_template[:500] + "..." if len(prompt_template) > 500 else prompt_template)
    
    # Main interface
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.header("🖼️ Historical Image")
        
        # Check if there's an image file in the directory
        image_files = [f for f in os.listdir('.') if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))]
        
        if image_files:
            try:
                image = Image.open(image_files[0])
                st.image(image, caption=f"Historical Singapore Image: {image_files[0]}", use_container_width=True)
            except Exception as e:
                st.error(f"Could not load image: {str(e)}")
        else:
            st.info("📷 No image file found in the directory.")
            st.markdown("Please add an image file (.png, .jpg, etc.) to display the historical photograph.")
            
            # Show placeholder image info
            st.markdown("**Expected Image:** Historical photograph of Ellenborough Market area, Singapore, ca. 1970")
    
    with col2:
        st.header("🤖 AI Analysis Comparison")
        
        # Model info
        st.info("🔬 **Model Information:**\n"
                "- **GPT-4o**: Multimodal AI with general architectural knowledge\n"
                "- **SEA-LION**: Singapore-contextualized model (simulation)\n"
                "- **Focus**: Southeast Asian urban history and architecture")
        
        # Generate analysis button
        if st.button("🚀 Generate SEA-LION Analysis", type="primary"):
            # Create the prompt
            sealion_prompt = create_sealion_prompt(metadata, gpt_output, prompt_template)
            
            # Show the filled prompt
            with st.expander("📝 Generated SEA-LION Prompt"):
                st.markdown(sealion_prompt[:1000] + "..." if len(sealion_prompt) > 1000 else sealion_prompt)
            
            with st.spinner("Generating SEA-LION analysis... (simulated)"):
                # Simulate processing time
                time.sleep(2)
                sealion_response = simulate_sealion_response()
            
            # Store in session state
            st.session_state.sealion_response = sealion_response
            st.session_state.gpt_response = gpt_output
            st.success("✅ Analysis complete!")
        
        # Display responses
        if hasattr(st.session_state, 'sealion_response'):
            tab1, tab2, tab3 = st.tabs(["📊 Comparison", "🤖 GPT-4o Response", "🦁 SEA-LION Response"])
            
            with tab1:
                st.subheader("📈 Key Differences")
                differences = highlight_differences(st.session_state.gpt_response, st.session_state.sealion_response)
                
                for diff in differences:
                    st.markdown(diff)
                
                # Response metrics
                col_stats1, col_stats2, col_stats3 = st.columns(3)
                with col_stats1:
                    st.metric("GPT-4o Length", f"{len(st.session_state.gpt_response):,} chars")
                with col_stats2:
                    st.metric("SEA-LION Length", f"{len(st.session_state.sealion_response):,} chars")
                with col_stats3:
                    gpt_words = len(st.session_state.gpt_response.split())
                    sealion_words = len(st.session_state.sealion_response.split())
                    st.metric("Word Count Ratio", f"{sealion_words/gpt_words:.1f}x")
            
            with tab2:
                st.markdown("### 🤖 GPT-4o Analysis")
                st.markdown(st.session_state.gpt_response)
            
            with tab3:
                st.markdown("### 🦁 SEA-LION Analysis")
                st.markdown(st.session_state.sealion_response)
        
        else:
            st.markdown("👆 Click the button above to generate and compare AI responses!")

if __name__ == "__main__":
    main()
